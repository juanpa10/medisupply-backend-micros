services:
  auth-service:
    build:
      context: ./auth-service
    image: pyms-auth-service:local
    ports:
      - "9001:9001"
    environment:
      JWT_SECRET: "supersecret"
      ACCESS_TOKEN_EXPIRE_MINUTES: "60"
      USERS_JSON: >-
        [{"email":"admin@medisupply.com","password":"Admin#123","role":"security_admin"},
         {"email":"viewer@medisupply.com","password":"Viewer#123","role":"viewer"}]
      DATABASE_URL: postgresql+psycopg2://app:app@medisupply-db:5432/medisupplydb
      INIT_DB: 'true'
    depends_on:
      medisupply-db:
        condition: service_healthy

  resource-api:
    build:
      context: ./resource-api
    image: pyms-resource-api:local
    ports:
      - "9002:9002"
    environment:
      JWT_SECRET: "supersecret"
      ALLOWED_ORIGINS: "*"

  
  roles-api:
    build:
      context: ./roles-api
    image: pyms-roles-api:local
    environment:
      # VALIDACIÓN JWT LOCAL 
      JWT_SECRET: "supersecret"
      JWT_ALGORITHM: "HS256"
      DATABASE_URL: postgresql+psycopg2://app:app@medisupply-db:5432/medisupplydb
      FLASK_APP: app.app:app
      PYTHONUNBUFFERED: "1"
    ports:
      - "9003:9003"
    depends_on:
      medisupply-db:
        condition: service_healthy
      auth-service:
        condition: service_started
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          python - <<'PY'
          import urllib.request, sys
          try:
              with urllib.request.urlopen('http://localhost:9003/api/health', timeout=3) as r:
                  print('ok')
          except Exception as e:
              print(e)
              sys.exit(1)
          PY
      interval: 10s
      timeout: 5s
      retries: 5

  crm-service:
    build:
      context: ./crm-service
    image: pyms-crm-service:local
    ports:
      - "9004:9004"
    environment:
      JWT_SECRET: "supersecret"
      # any crm-specific env vars can be added here
      DATABASE_URL: postgresql+psycopg2://app:app@medisupply-db:5432/medisupplydb
      FLASK_APP: run.py
      PYTHONUNBUFFERED: "1"
    depends_on:
      auth-service:
        condition: service_started
      medisupply-db:
        condition: service_healthy
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          python - <<'PY'
          import urllib.request, sys
          try:
              with urllib.request.urlopen('http://localhost:9004/health', timeout=3) as r:
                  print('ok')
          except Exception as e:
              print(e)
              sys.exit(1)
          PY
      interval: 10s
      timeout: 5s
      retries: 5

  managers-service:
    build:
      context: ./managers-service
    image: pyms-managers-service:local
    ports:
      - "9005:5001"
    environment:
      JWT_SECRET: "supersecret"
      JWT_ALGORITHM: "HS256"
      AUTH_SERVICE_URL: "http://auth-service:9001"
      DATABASE_URL: postgresql+psycopg2://app:app@medisupply-db:5432/medisupplydb
      FLASK_APP: app:create_app
      PYTHONUNBUFFERED: "1"
    command: /bin/sh -c "python init_db.py --init --seed && flask run --host=0.0.0.0 --port=5001"
    depends_on:
      auth-service:
        condition: service_started
      medisupply-db:
        condition: service_healthy
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          python - <<'PY'
          import urllib.request, sys
          try:
              with urllib.request.urlopen('http://localhost:5001/health', timeout=3) as r:
                  print('ok')
          except Exception as e:
              print(e)
              sys.exit(1)
          PY
      interval: 10s
      timeout: 5s
      retries: 5



  medisupply-db:
    image: postgres:16-alpine
    container_name: medisupply-db
    environment:
      - POSTGRES_DB=medisupplydb
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
    ports:
      - "5432:5432"
    volumes:
      - medisupply_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d medisupplydb"]
      interval: 10s
      timeout: 5s
      retries: 5

  video-api:
    build:
      context: ./video-api
    image: pyms-video-api:local
    environment:
      # Clave para firmar URLs temporales (cámbiala en prod)
      SECRET_KEY: "supersecret"
      # Carpeta de almacenamiento (privada en el contenedor)
      UPLOAD_DIR: /srv/app/data/uploads
      # Nota: actualmente video-api usa SQLite interno para metadatos.
      # Si más adelante migras a Postgres, ajustamos el código para usar DATABASE_URL.
      # DATABASE_URL: postgresql+psycopg2://app:app@medisupply-db:5432/medisupplydb
    ports:
      - "9006:9005"   # host:container
    volumes:
      - video_uploads:/srv/app/data/uploads
    depends_on:
      # No requiere auth-service para arrancar, pero puedes añadirlo si quieres
      # validar JWT en futuras versiones del servicio.
      auth-service:
        condition: service_started
      # Si decides migrar a Postgres, descomenta esto:
      medisupply-db:
        condition: service_healthy
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          python - <<'PY'
          import urllib.request, sys
          try:
              with urllib.request.urlopen('http://localhost:9005/health', timeout=3) as r:
                  print('ok')
          except Exception as e:
              print(e)
              sys.exit(1)
          PY
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  medisupply_pg_data:
  video_uploads:
