name: Deploy to Kubernetes (k3s via SSH)

on:
  workflow_run:
    workflows: ["Build & Push to ECR (Kubernetes)"]   # debe coincidir EXACTO con el nombre del workflow de build
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Collect files (deploy-medisupply/*)
        run: |
          rm -rf out && mkdir -p out
          if [ -d deploy-medisupply ]; then
            cp -r deploy-medisupply out/deploy-medisupply
          fi
          # evita "tar: empty archive" si no hay nada que copiar
          if [ ! -d out/deploy-medisupply ]; then
            echo "placeholder" > out/.keep
          fi

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "out"                 # importante: copia el dir, no "out/*"
          target: "/tmp/medisupply"

      - name: Install k3s & deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPO: ${{ vars.ECR_REPOSITORY }}
          TAG_PREFIX: k8s-
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          envs: AWS_REGION,AWS_ACCOUNT_ID,ECR_REPO,TAG_PREFIX
          script: |
            set -e
            BASE="/tmp/medisupply/out/deploy-medisupply"

            # instala k3s si subiste el script
            if [ -f "$BASE/scripts/k3s-install.sh" ]; then
              sudo bash "$BASE/scripts/k3s-install.sh"
            fi

            # aplica manifests base si existen
            if [ -d "$BASE/k8s" ]; then
              [ -f "$BASE/k8s/namespace.yaml" ]        && sudo k3s kubectl apply -f "$BASE/k8s/namespace.yaml" || true
              [ -f "$BASE/k8s/configmap.env.yaml" ]    && sudo k3s kubectl apply -f "$BASE/k8s/configmap.env.yaml" || true
              if [ -d "$BASE/k8s/db" ]; then
                [ -f "$BASE/k8s/db/secret.yaml" ]      && sudo k3s kubectl apply -f "$BASE/k8s/db/secret.yaml" || true
                [ -f "$BASE/k8s/db/statefulset.yaml" ] && sudo k3s kubectl apply -f "$BASE/k8s/db/statefulset.yaml" || true
                [ -f "$BASE/k8s/db/service.yaml" ]     && sudo k3s kubectl apply -f "$BASE/k8s/db/service.yaml" || true
              fi
              [ -f "$BASE/k8s/ingress.yaml" ]          && sudo k3s kubectl apply -f "$BASE/k8s/ingress.yaml" || true
            fi

            # ECR imagePullSecret (idempotente)
            PASS=$(aws ecr get-login-password --region "$AWS_REGION")
            sudo k3s kubectl -n medisupply delete secret ecr-cred --ignore-not-found
            sudo k3s kubectl -n medisupply create secret docker-registry ecr-cred \
              --docker-server="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com" \
              --docker-username="AWS" \
              --docker-password="$PASS"

            # SHA del build que terminó
            SHA="${{ github.event.workflow_run.head_sha }}"

            # despliegue dinámico: cada carpeta de servicio (excepto db y yamls sueltos)
            if [ -d "$BASE/k8s" ]; then
              for d in $(ls -1 "$BASE/k8s"); do
                if [ "$d" = "db" ] || [ "$d" = "namespace.yaml" ] || [ "$d" = "configmap.env.yaml" ] || [ "$d" = "ingress.yaml" ]; then
                  continue
                fi
                if [ -d "$BASE/k8s/$d" ] && [ -f "$BASE/k8s/$d/service.yaml" ] && [ -f "$BASE/k8s/$d/deployment.yaml" ]; then
                  echo ">> Deploy service: $d"

                  # espera imagen en ECR con prefijo k8s-
                  for i in $(seq 1 30); do
                    ok=$(aws ecr describe-images \
                         --repository-name "$ECR_REPO" \
                         --image-ids imageTag="${TAG_PREFIX}${d}-${SHA}" \
                         --query 'imageDetails[0].imageDigest' \
                         --output text 2>/dev/null || true)
                    if [ -n "$ok" ] && [ "$ok" != "None" ]; then
                      echo "   ✔ image ${TAG_PREFIX}${d}-${SHA} found"
                      break
                    fi
                    echo "   …waiting image ${TAG_PREFIX}${d}-${SHA} ($i/30)"; sleep 4
                  done

                  sudo k3s kubectl apply -f "$BASE/k8s/$d/service.yaml"
                  sudo k3s kubectl apply -f "$BASE/k8s/$d/deployment.yaml"

                  CNAME=$(sudo k3s kubectl -n medisupply get deploy/$d -o jsonpath='{.spec.template.spec.containers[0].name}')
                  IMG="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:${TAG_PREFIX}${d}-${SHA}"
                  sudo k3s kubectl -n medisupply set image deploy/$d $CNAME=$IMG
                  sudo k3s kubectl -n medisupply rollout status deploy/$d --timeout=180s
                fi
              done
            fi
