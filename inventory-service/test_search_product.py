"""
Script de prueba para el endpoint de b√∫squeda por producto

Este script prueba la nueva funcionalidad de b√∫squeda de inventario
por nombre, c√≥digo o referencia del producto.

Ejecutar: python test_search_product.py
"""
import requests
import json
from typing import Dict, Any


BASE_URL = "http://localhost:5003/api/v1"
AUTH_URL = "http://localhost:9001/api/v1/auth"


def print_section(title: str):
    """Imprime un t√≠tulo de secci√≥n"""
    print("\n" + "="*70)
    print(f"  {title}")
    print("="*70)


def print_result(response: requests.Response):
    """Imprime el resultado de una petici√≥n"""
    print(f"\nStatus Code: {response.status_code}")
    try:
        data = response.json()
        print(json.dumps(data, indent=2, ensure_ascii=False))
    except:
        print(response.text)


def get_auth_token() -> str:
    """Obtiene un token de autenticaci√≥n"""
    print_section("üîê Obteniendo Token de Autenticaci√≥n")
    
    try:
        response = requests.post(
            f"{AUTH_URL}/login",
            json={
                "username": "admin",
                "password": "admin123"
            },
            timeout=5
        )
        
        if response.status_code == 200:
            token = response.json().get('data', {}).get('token')
            print(f"‚úÖ Token obtenido exitosamente")
            return token
        else:
            print(f"‚ùå Error al obtener token: {response.status_code}")
            print_result(response)
            return None
            
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è  auth-service no est√° disponible en puerto 9001")
        print("   Continuando sin autenticaci√≥n (algunos tests pueden fallar)")
        return None
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return None


def test_search_without_auth():
    """Test 1: B√∫squeda sin autenticaci√≥n (debe fallar)"""
    print_section("Test 1: B√∫squeda sin autenticaci√≥n")
    
    response = requests.get(
        f"{BASE_URL}/inventory/search-product",
        params={"q": "paracetamol"}
    )
    
    print_result(response)
    
    if response.status_code == 401:
        print("‚úÖ Test PASADO: Rechaza peticiones sin autenticaci√≥n")
    else:
        print("‚ùå Test FALLIDO: Deber√≠a rechazar peticiones sin token")


def test_search_without_query(token: str):
    """Test 2: B√∫squeda sin par√°metro q"""
    print_section("Test 2: B√∫squeda sin par√°metro 'q'")
    
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    
    response = requests.get(
        f"{BASE_URL}/inventory/search-product",
        headers=headers
    )
    
    print_result(response)
    
    if response.status_code == 400:
        print("‚úÖ Test PASADO: Valida par√°metro requerido")
    else:
        print("‚ùå Test FALLIDO: Deber√≠a validar par√°metro 'q'")


def test_search_short_query(token: str):
    """Test 3: B√∫squeda con query muy corto (< 2 caracteres)"""
    print_section("Test 3: B√∫squeda con query muy corto")
    
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    
    response = requests.get(
        f"{BASE_URL}/inventory/search-product",
        params={"q": "a"},
        headers=headers
    )
    
    print_result(response)
    
    if response.status_code == 400:
        print("‚úÖ Test PASADO: Valida longitud m√≠nima")
    else:
        print("‚ùå Test FALLIDO: Deber√≠a validar longitud m√≠nima de 2 caracteres")


def test_search_by_name(token: str):
    """Test 4: B√∫squeda por nombre de producto"""
    print_section("Test 4: B√∫squeda por nombre 'paracetamol'")
    
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    
    response = requests.get(
        f"{BASE_URL}/inventory/search-product",
        params={"q": "paracetamol"},
        headers=headers
    )
    
    print_result(response)
    
    if response.status_code == 200:
        data = response.json()
        results = data.get('data', [])
        
        if len(results) > 0:
            print(f"\n‚úÖ Test PASADO: Encontr√≥ {len(results)} producto(s)")
            
            # Verificar estructura de respuesta
            first_item = results[0]
            if 'product_info' in first_item:
                product_info = first_item['product_info']
                print(f"\nüì¶ Producto encontrado:")
                print(f"   - Nombre: {product_info.get('nombre')}")
                print(f"   - C√≥digo: {product_info.get('codigo')}")
                print(f"   - Referencia: {product_info.get('referencia')}")
                print(f"   - Stock disponible: {first_item.get('cantidad_disponible')}")
                print(f"   - Ubicaci√≥n: {first_item.get('ubicacion_completa')}")
                print("‚úÖ Estructura de respuesta correcta")
            else:
                print("‚ö†Ô∏è  Falta 'product_info' en la respuesta")
        else:
            print("‚ö†Ô∏è  No se encontraron resultados")
    else:
        print("‚ùå Test FALLIDO")


def test_search_by_code(token: str):
    """Test 5: B√∫squeda por c√≥digo de producto"""
    print_section("Test 5: B√∫squeda por c√≥digo 'MED-001'")
    
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    
    response = requests.get(
        f"{BASE_URL}/inventory/search-product",
        params={"q": "MED-001"},
        headers=headers
    )
    
    print_result(response)
    
    if response.status_code == 200:
        data = response.json()
        results = data.get('data', [])
        
        if len(results) > 0:
            print(f"\n‚úÖ Test PASADO: Encontr√≥ {len(results)} producto(s) por c√≥digo")
        else:
            print("‚ö†Ô∏è  No se encontraron resultados")
    else:
        print("‚ùå Test FALLIDO")


def test_search_by_reference(token: str):
    """Test 6: B√∫squeda por referencia"""
    print_section("Test 6: B√∫squeda por referencia 'REF-PARA'")
    
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    
    response = requests.get(
        f"{BASE_URL}/inventory/search-product",
        params={"q": "REF-PARA"},
        headers=headers
    )
    
    print_result(response)
    
    if response.status_code == 200:
        data = response.json()
        results = data.get('data', [])
        
        if len(results) > 0:
            print(f"\n‚úÖ Test PASADO: Encontr√≥ {len(results)} producto(s) por referencia")
        else:
            print("‚ö†Ô∏è  No se encontraron resultados")
    else:
        print("‚ùå Test FALLIDO")


def test_search_with_bodega_filter(token: str):
    """Test 7: B√∫squeda con filtro de bodega"""
    print_section("Test 7: B√∫squeda con filtro de bodega")
    
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    
    response = requests.get(
        f"{BASE_URL}/inventory/search-product",
        params={"q": "ibuprofeno", "bodega_id": 1},
        headers=headers
    )
    
    print_result(response)
    
    if response.status_code == 200:
        data = response.json()
        results = data.get('data', [])
        
        if len(results) > 0:
            print(f"\n‚úÖ Test PASADO: Encontr√≥ {len(results)} en bodega 1")
            
            # Verificar que todos sean de bodega 1
            all_bodega_1 = all(item.get('bodega_id') == 1 for item in results)
            if all_bodega_1:
                print("‚úÖ Filtro de bodega funcionando correctamente")
            else:
                print("‚ö†Ô∏è  Algunos resultados no son de bodega 1")
        else:
            print("‚ö†Ô∏è  No se encontraron resultados en bodega 1")
    else:
        print("‚ùå Test FALLIDO")


def test_search_case_insensitive(token: str):
    """Test 8: B√∫squeda case-insensitive"""
    print_section("Test 8: B√∫squeda case-insensitive (PARACETAMOL vs paracetamol)")
    
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    
    # B√∫squeda en may√∫sculas
    response_upper = requests.get(
        f"{BASE_URL}/inventory/search-product",
        params={"q": "PARACETAMOL"},
        headers=headers
    )
    
    # B√∫squeda en min√∫sculas
    response_lower = requests.get(
        f"{BASE_URL}/inventory/search-product",
        params={"q": "paracetamol"},
        headers=headers
    )
    
    if response_upper.status_code == 200 and response_lower.status_code == 200:
        results_upper = len(response_upper.json().get('data', []))
        results_lower = len(response_lower.json().get('data', []))
        
        if results_upper == results_lower and results_upper > 0:
            print(f"‚úÖ Test PASADO: Ambas b√∫squedas retornan {results_upper} resultado(s)")
            print("   La b√∫squeda es case-insensitive")
        else:
            print(f"‚ö†Ô∏è  May√∫sculas: {results_upper}, Min√∫sculas: {results_lower}")
    else:
        print("‚ùå Test FALLIDO")


def test_search_partial_match(token: str):
    """Test 9: B√∫squeda con coincidencia parcial"""
    print_section("Test 9: B√∫squeda parcial 'meta' (deber√≠a encontrar Metformina)")
    
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    
    response = requests.get(
        f"{BASE_URL}/inventory/search-product",
        params={"q": "meta"},
        headers=headers
    )
    
    print_result(response)
    
    if response.status_code == 200:
        data = response.json()
        results = data.get('data', [])
        
        if len(results) > 0:
            print(f"\n‚úÖ Test PASADO: B√∫squeda parcial funciona ({len(results)} resultados)")
            for item in results:
                nombre = item.get('product_info', {}).get('nombre', 'N/A')
                print(f"   - {nombre}")
        else:
            print("‚ö†Ô∏è  No se encontraron resultados")
    else:
        print("‚ùå Test FALLIDO")


def test_search_no_results(token: str):
    """Test 10: B√∫squeda sin resultados"""
    print_section("Test 10: B√∫squeda sin resultados (producto inexistente)")
    
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    
    response = requests.get(
        f"{BASE_URL}/inventory/search-product",
        params={"q": "ProductoQueNoExiste123"},
        headers=headers
    )
    
    print_result(response)
    
    if response.status_code == 200:
        data = response.json()
        results = data.get('data', [])
        
        if len(results) == 0:
            print("\n‚úÖ Test PASADO: Retorna lista vac√≠a cuando no hay coincidencias")
        else:
            print(f"‚ö†Ô∏è  Se esperaba 0 resultados, obtuvo {len(results)}")
    else:
        print("‚ùå Test FALLIDO")


def main():
    """Ejecuta todos los tests"""
    print("\n" + "="*70)
    print("  üß™ SUITE DE PRUEBAS - B√öSQUEDA POR PRODUCTO")
    print("="*70)
    print("\nüìç Endpoint: GET /api/v1/inventory/search-product")
    print("üéØ Funcionalidad: Buscar inventario por nombre, c√≥digo o referencia")
    
    # Obtener token de autenticaci√≥n
    token = get_auth_token()
    
    # Ejecutar tests
    test_search_without_auth()
    
    if token:
        test_search_without_query(token)
        test_search_short_query(token)
        test_search_by_name(token)
        test_search_by_code(token)
        test_search_by_reference(token)
        test_search_with_bodega_filter(token)
        test_search_case_insensitive(token)
        test_search_partial_match(token)
        test_search_no_results(token)
    else:
        print("\n‚ö†Ô∏è  Tests con autenticaci√≥n omitidos (no hay token)")
    
    # Resumen
    print_section("üìä RESUMEN DE PRUEBAS")
    print("\n‚úÖ Suite de pruebas completada")
    print("\nüí° Para ejecutar el servicio:")
    print("   cd inventory-service && python run.py")
    print("\nüí° Para reiniciar la base de datos:")
    print("   cd inventory-service && python init_db.py")
    print("\n" + "="*70 + "\n")


if __name__ == '__main__':
    main()
