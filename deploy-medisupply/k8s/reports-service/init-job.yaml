apiVersion: batch/v1
kind: Job
metadata:
  name: reports-service-init-db
  namespace: medisupply
  labels: { app: reports-service, job: init-db }
spec:
  backoffLimit: 2
  template:
    metadata: { labels: { app: reports-service, job: init-db } }
    spec:
      restartPolicy: Never
      imagePullSecrets: [ { name: ecr-cred } ]
      containers:
        - name: init
          # image will be replaced by pipeline
          image: REPLACED_BY_PIPELINE
          imagePullPolicy: Always
          command: ["/bin/sh", "-c"]
          # Run init scripts; do not swallow errors so CI can detect failures
          # Ensure we run from /app and that Python can import the top-level
          # `app` package. When a script is executed directly (python scripts/foo.py)
          # sys.path[0] becomes the script's directory which prevents sibling
          # packages (like /app/app) from being discovered. Setting PYTHONPATH
          # and running commands from /app avoids ModuleNotFoundError.
          # Run both init steps inside a single Python process using a heredoc.
          # This avoids cross-process import/order issues and produces unified logs.
          args: ["cd /app && PYTHONPATH=/app python - <<'PY'\nfrom app.db import engine\nprint('ENGINE_URL=' + str(engine.url))\nprint('Running init_db...')\nfrom init_db import init_db\ninit_db()\nprint('Running ensure_jan2025...')\nfrom scripts.ensure_jan2025 import ensure_rows\nn = ensure_rows()\nprint('ensure_jan2025 inserted', n)\nPY"]
          env:
            - name: PYTHONPATH
              value: "/app"
            - name: DB_HOST
              value: "postgres.medisupply.svc.cluster.local"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              valueFrom: { secretKeyRef: { name: postgres-secret, key: POSTGRES_DB } }
            - name: DB_USER
              valueFrom: { secretKeyRef: { name: postgres-secret, key: POSTGRES_USER } }
            - name: DB_PASSWORD
              valueFrom: { secretKeyRef: { name: postgres-secret, key: POSTGRES_PASSWORD } }
            # Do NOT set DATABASE_URL here using a literal with $(...) substitutions.
            # In some environments that can end up unexpanded and injected as a
            # literal like "postgresql+psycopg2://$(DB_USER):..." which causes
            # the app to attempt to use a broken URL (and avoids the fallback
            # logic that builds DATABASE_URL from DB_* env vars). The app's
            # `app/db.py` already constructs DATABASE_URL from DB_USER/DB_PASSWORD/
            # DB_HOST/DB_PORT/DB_NAME when DATABASE_URL is not present â€” rely on
            # that to avoid brittle in-manifest string interpolation.
          envFrom:
            - configMapRef: { name: medisupply-config }
