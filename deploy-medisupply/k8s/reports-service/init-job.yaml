apiVersion: batch/v1
kind: Job
metadata:
  name: reports-service-init-db
  namespace: medisupply
  labels: { app: reports-service, job: init-db }
spec:
  backoffLimit: 2
  template:
    metadata: { labels: { app: reports-service, job: init-db } }
    spec:
      restartPolicy: Never
      imagePullSecrets: [ { name: ecr-cred } ]
      containers:
        - name: init
          # image will be replaced by pipeline
          image: REPLACED_BY_PIPELINE
          imagePullPolicy: Always
          command: ["/bin/sh", "-c"]
          # Run init scripts; do not swallow errors so CI can detect failures
          # Ensure we run from /app and that Python can import the top-level
          # `app` package. When a script is executed directly (python scripts/foo.py)
          # sys.path[0] becomes the script's directory which prevents sibling
          # packages (like /app/app) from being discovered. Setting PYTHONPATH
          # and running commands from /app avoids ModuleNotFoundError.
          args: ["cd /app && PYTHONPATH=/app python init_db.py && PYTHONPATH=/app python scripts/ensure_jan2025.py"]
          env:
            - name: PYTHONPATH
              value: "/app"
            - name: DB_HOST
              value: "postgres.medisupply.svc.cluster.local"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              valueFrom: { secretKeyRef: { name: postgres-secret, key: POSTGRES_DB } }
            - name: DB_USER
              valueFrom: { secretKeyRef: { name: postgres-secret, key: POSTGRES_USER } }
            - name: DB_PASSWORD
              valueFrom: { secretKeyRef: { name: postgres-secret, key: POSTGRES_PASSWORD } }
            - name: DATABASE_URL
              value: "postgresql+psycopg2://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)"
          envFrom:
            - configMapRef: { name: medisupply-config }
